from __future__ import print_function

import json
import logging
import os
import random
import numpy as np
import sys
import time
from builtins import range

import MalmoPython

if sys.version_info[0] == 2:
    # Workaround for https://github.com/PythonCharmers/python-future/issues/262
    import Tkinter as tk
else:
    import tkinter as tk


# ------------------------------------------------------------------------------------------------
# Copyright (c) 2016 Microsoft Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
# associated documentation files (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge, publish, distribute,
# sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
# NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# ------------------------------------------------------------------------------------------------


class Qlearning(object):
    """Tabular Q-learning agent for discrete state/action spaces."""

    def __init__(self):
        self.epsilon = 0.01  # chance of taking a random action instead of the best
        self.goalNo = 4
        # let say there's four different goals(Goal 0, subGoal 1, subGoal 2, subGoal 3)
        self.goalSelection = '0010'
        self.goalConverge = [False, False, False, False]
        self.logger = logging.getLogger(__name__)
        # disable logger print out
        self.logger.disabled = True
        if False:  # True if you want to see more information
            self.logger.setLevel(logging.DEBUG)
        else:
            self.logger.setLevel(logging.INFO)
        self.logger.handlers = []
        self.logger.addHandler(logging.StreamHandler(sys.stdout))

        self.actions = ["movenorth 1", "movesouth 1", "movewest 1", "moveeast 1"]
        self.q_table = {'4:1': [[2625663.0, 102986.0, 48005.0, 2628982.0], [10996.0, 816.0, 57777.0, 814.0], [416815.0, 575521.0, 402960.0, 425488.0], [320443.0, 320444.0, 1173223.0, 1218452.0]], '3:1': [[-7.0, 2388390.0, -7.0, -8.0], [34387.0, 58687.0, -2.0, 10996.0], [562801.0, 428803.0, 425485.0, 569111.0], [293524.0, 320441.0, 375477.0, 1188133.0]], '5:1': [[2621637.0, 2630792.0, 2618182.0, 1279224.0], [156957.0, 827069.0, -2.0, -3.0], [-3.0, 569113.0, -4.0, -4.0], [509224.0, 1233862.0, 1173224.0, 514159.0]], '5:2': [[2619110.0, 5638692.0, 2592065.0, 184087.0], [291492.0, 301703.0, 956640.0, 1043387.0], [430615.0, 588741.0, -3.0, 506.0], [1233861.0, 1264981.0, 517478.0, 977399.0]], '6:1': [[1279224.0, 2621637.0, -7.0, -8.0], [-2.0, 766034.0, -3.0, -3.0], [-3.0, -3.0, 430615.0, -3.0], [-7.0, 977399.0, 254199.0, -6.0]], '6:2': [[59524.0, 4273160.0, 2637119.0, -6.0], [-3.0, 1420994.0, 956641.0, 458024.0], [-3.0, 414972.0, -3.0, -2.0], [-7.0, 977400.0, -6.0, 977396.0]], '4:2': [[102987.0, 2619111.0, -7.0, 59526.0], [31477.0, 1494622.0, 4153.0, 956641.0], [-3.0, 415699.0, 415288.0, 582031.0], [155626.0, 11130.0, 155626.0, 519288.0]], '7:1': [[-7.0, -7.0, 2619109.0, 8129787.0], [-2.0, 1151740.0, -2.0, -2.0], [-3.0, -3.0, -3.0, -4.0], [-6.0, 37625.0, -5.0, -6.0]], '7:2': [[7807005.0, 8202804.0, 2637118.0, 11574235.0], [-2.0, 1393721.0, -2.0, -2.0], [-3.0, 56160.0, -3.0, -2.0], [-5.0, -5.0, -5.0, 1044442.0]], '7:3': [[8202805.0, 3089738.0, 2637119.0, 1353860.0], [596523.0, 1226676.0, 1430312.0, 623441.0], [38141.0, 68888.0, -2.0, 56159.0], [506476.0, -4.0, 1173226.0, 977398.0]], '7:4': [[3089737.0, 1731832.0, 18555.0, 11762873.0], [1425602.0, 1264993.0, 1061096.0, 1226675.0], [-1.0, 80507.0, -1.0, -2.0], [-3.0, 144556.0, 155629.0, -4.0]], '7:5': [[8690726.0, 12583331.0, -128846.0, 4901530.0], [1390402.0, 1264992.0, -130201.0, 1188956.0], [-2.0, -1.0, 87117.0, -1.0], [-4.0, 1607.0, -11973.0, 1114590.0]], '2:1': [[-7.0, -6.0, 2438209.0, -7.0], [-2.0, 1477192.0, -1.0, -1.0], [562800.0, 428802.0, -5.0, 562801.0], [1173222.0, 320440.0, 375476.0, 1188132.0]], '3:2': [[-6.0, -6873.0, 2388391.0, 48007.0], [12706.0, 58688.0, 12706.0, 1488712.0], [556592.0, -191.0, -5.0, 415289.0], [446723.0, -11882.0, 254195.0, 155627.0]], '1:1': [[13443781.0, 13651218.0, 2363782.0, 2388390.0], [-1.0, -2.0, -2.0, 1471582.0], [550481.0, 402957.0, 427093.0, 562800.0], [1173221.0, 320439.0, 1058149.0, 1173222.0]], '2:2': [[-7.0, 664782.0, 13599209.0, 1000.0], [-2.0, -1.0, 0, 1482902.0], [428803.0, -4.0, 427092.0, -4.0], [-8.0, -7.0, 293521.0, 320441.0]], '1:2': [[1669703.0, 13703328.0, 13547300.0, 13340663.0], [-2.0, -1.0, -2.0, -1.0], [-6.0, -5.0, -5.0, 428802.0], [446721.0, -7.0, -7.0, 216068.0]], '2:3': [[-6.0, 3210836.0, -5.0, -5182.0], [0, 0, -1.0, 2109.0], [333004.0, -4.0, -4.0, -391.0], [-7.0, -6.0, -7.0, -2882.0]], '1:3': [[13340664.0, 13755538.0, 13340665.0, 664782.0], [-1.0, -1.0, -1.0, -1.0], [-4.0, -4.0, -5.0, -4.0], [320439.0, -6.0, -6.0, -6.0]], '1:4': [[3222445.0, 13807948.0, 3210837.0, 3210836.0], [-1.0, -1.0, -1.0, -1.0], [-4.0, -3.0, -3.0, -3.0], [-6.0, -6.0, -6.0, -6.0]], '1:5': [[13703329.0, 13807949.0, 3210838.0, 610746.0], [-1.0, -2.0, -1.0, -1.0], [-3.0, -3.0, -3.0, -3.0], [-5.0, -5.0, -5.0, -6.0]], '1:6': [[3176611.0, 13807950.0, 13807949.0, -2.0], [-2.0, -4.0, -3.0, -2.0], [-3.0, -3.0, -4.0, 44402.0], [-6.0, 9820.0, -6.0, -5.0]], '2:6': [[-3.0, 13340670.0, -3.0, -2.0], [-2.0, -3.0, -2.0, 184949.0], [-3.0, -3.0, -3.0, 56721.0], [509225.0, 509225.0, 5710.0, 557916.0]], '3:6': [[-3.0, 13913070.0, -2.0, 2103283.0], [188659.0, -3.0, -2.0, -2.0], [-3.0, -2.0, -2.0, 96076.0], [509226.0, -3.0, 509226.0, 665606.0]], '4:6': [[3928291.0, 12000927.0, 1242514.0, 9726866.0], [153359.0, -2.0, -2.0, -2.0], [-1.0, 449688.0, -2.0, 550488.0], [461437.0, 200332.0, 509227.0, 1203248.0]], '4:5': [[2619110.0, 3914.0, 130426.0, 4273163.0], [156069.0, -2.0, 6916.0, -2.0], [-2.0, 470543.0, -1.0, 478463.0], [91766.0, 1058157.0, 9822.0, -3.0]], '5:5': [[2619113.0, 9726866.0, 2892453.0, -68737.0], [-1.0, -2.0, 17733.0, -12573.0], [562806.0, 544479.0, 478462.0, 609471.0], [1173228.0, 1280693.0, 510136.0, -118065.0]], '5:4': [[5638692.0, 6637900.0, 2219230.0, 137633.0], [1096916.0, -2.0, 0, 1008269.0], [-1.0, 602461.0, 463025.0, -1.0], [538361.0, 1264983.0, 1264981.0, 554206.0]], '6:4': [[2618184.0, -8964.0, 18556.0, -4.0], [1226678.0, -105710.0, 973750.0, 781042.0], [0, 11236.0, -1.0, -1.0], [1173226.0, -17773.0, 557916.0, 144555.0]], '6:3': [[2637118.0, -5.0, 5638692.0, -5.0], [1226677.0, 1226677.0, 1435122.0, 1133332.0], [-1.0, 10926.0, 414973.0, 65369.0], [514160.0, 557915.0, 1233863.0, 977399.0]], '8:3': [[10316083.0, 8093481.0, 8202804.0, 12682844.0], [-1.0, 1416482.0, 623442.0, -1.0], [-3.0, -3.0, 56160.0, -3.0], [515767.0, 951379.0, 1058153.0, 506477.0]], '9:3': [[12682843.0, 12682845.0, 12241562.0, 12387389.0], [-3.0, -3.0, 1412072.0, -3.0], [-4.0, 29330.0, 29332.0, -5.0], [-4.0, 155624.0, 1030834.0, -4.0]], '5:3': [[4273160.0, 6421036.0, 2619720.0, 5638691.0], [956641.0, 1008268.0, 1440032.0, 827071.0], [422571.0, 595551.0, -2.0, 414972.0], [1233862.0, 1264982.0, 1173226.0, 1218453.0]], '4:4': [[2619111.0, -4.0, 3720.0, 2637121.0], [0, 44460.0, 192469.0, 0], [-2.0, 419246.0, -1.0, 575524.0], [-6.0, 1058156.0, 547387.0, 1264982.0]], '3:4': [[-391.0, -3.0, 2363784.0, 3719.0], [200388.0, 148242.0, 103697.0, 32252.0], [-91.0, 69440.0, -4.0, -2.0], [-19273.0, -4.0, -5.0, 1264981.0]], '8:2': [[10975117.0, 12241562.0, 8202805.0, 12338680.0], [-2.0, -2.0, -2.0, -3.0], [-4.0, -3.0, 3705.0, -4.0], [-4.0, 1058152.0, 507194.0, -5.0]], '9:2': [[12436197.0, 12682844.0, 12338679.0, 11480517.0], [-3.0, 1407762.0, -3.0, -3.0], [-4.0, -4.0, -4.0, 443863.0], [-5.0, 557911.0, -5.0, -6.0]], '10:2': [[12485105.0, 12583325.0, 9892794.0, 11480517.0], [-3.0, -4.0, 1403552.0, -3.0], [-6.0, 501499.0, -5.0, 443863.0], [990603.0, 990605.0, 557910.0, 951377.0]], '10:1': [[12338678.0, 12485106.0, 12338679.0, 11857788.0], [-4.0, 1399442.0, -4.0, -4.0], [154742.0, 478453.0, 154741.0, 438944.0], [665597.0, 990604.0, -7.0, 665597.0]], '10:3': [[12583324.0, 12338681.0, 12682844.0, 12583325.0], [-3.0, -3.0, -3.0, -3.0], [213297.0, 501500.0, 12013.0, 443864.0], [990604.0, 990606.0, 977397.0, 665599.0]], '10:4': [[4370201.0, 9768169.0, 12682845.0, 9644641.0], [-3.0, -3.0, 4129.0, -3.0], [438946.0, 506510.0, -3.0, 154745.0], [938969.0, 1072061.0, 506476.0, 591883.0]], '10:5': [[10840793.0, 9768170.0, 12096838.0, 7631465.0], [-3.0, 291486.0, -3.0, -3.0], [478455.0, 511620.0, -2.0, 478456.0], [659191.0, 964290.0, 1072062.0, 591884.0]], '10:6': [[5092000.0, 9768171.0, 11621249.0, 8387955.0], [291485.0, -4.0, 781036.0, 291486.0], [-2.0, -2.0, 516830.0, -2.0], [659192.0, 1003918.0, -3.0, 154863.0]], '9:6': [[12241565.0, 12338683.0, 12832875.0, 11574239.0], [410987.0, 1226671.0, 751221.0, 751219.0], [-2.0, -2.0, 522140.0, -2.0], [-3.0, 1003919.0, 154867.0, 108418.0]], '9:7': [[12338684.0, 9320172.0, 12338684.0, 10840796.0], [1170243.0, 1170243.0, 1384962.0, 1078898.0], [6414.0, 92674.0, -2.0, -3.0], [591886.0, 659194.0, 1114592.0, 659194.0]], '8:7': [[12338685.0, 10619754.0, 10840799.0, 11715566.0], [990956.0, 1078897.0, 1386172.0, 1226671.0], [-2.0, -2.0, 98486.0, -1.0], [707558.0, 799757.0, 1143711.0, 640568.0]], '9:5': [[12682845.0, 12782765.0, 12338684.0, 12096837.0], [-3.0, 271469.0, 906412.0, 252249.0], [-2.0, -2.0, -2.0, -2.0], [15371.0, 964291.0, 1086072.0, 1072061.0]], '9:4': [[12338681.0, 12782764.0, 11294883.0, 12338681.0], [-2.0, -3.0, 1395528.0, -2.0], [29331.0, -2.0, -3.0, -3.0], [506477.0, 3431.0, 144554.0, -4.0]], '8:4': [[11248773.0, 8690728.0, 8021162.0, 11810283.0], [28485.0, 494451.0, 1420992.0, -3.0], [-3.0, 20625.0, -2.0, -2.0], [1044443.0, -3.0, 144555.0, -5.0]], '8:5': [[10840793.0, 12534121.0, 9320171.0, 10975122.0], [354942.0, 365951.0, 1264993.0, 470032.0], [-2.0, -2.0, 74598.0, -3.0], [507195.0, 1114591.0, 63366.0, 175783.0]], '8:6': [[12000921.0, 12338684.0, 12883085.0, 12732756.0], [906412.0, 583412.0, 990957.0, 751220.0], [-2.0, -2.0, 527550.0, 193384.0], [1114590.0, 1129101.0, 1607.0, -1.0]], '8:8': [[10445417.0, 10402208.0, 11527335.0, 9481608.0], [973746.0, 344028.0, 874290.0, 1170243.0], [-2.0, 213300.0, 434532.0, -3.0], [1003920.0, -1.0, 612324.0, 134448.0]], '7:8': [[12883086.0, 10751981.0, 12883088.0, 10751981.0], [637049.0, -5.0, -4.0, 973745.0], [436642.0, -2.0, -3.0, 434531.0], [990612.0, 809066.0, 938974.0, 764221.0]], '6:8': [[-1580797.0, 11248781.0, 12883089.0, 12883087.0], [-3991.0, -3.0, -4.0, -4.0], [-3191.0, -2.0, -2.0, 415697.0], [59354.0, 828383.0, 926864.0, 951384.0]], '6:9': [[12387398.0, 9603736.0, 8962796.0, 10102846.0], [-3.0, -4.0, -4.0, -3.0], [-3.0, -4.0, -3.0, -2.0], [730785.0, -1.0, -2.0, 938974.0]], '5:9': [[8962797.0, 4971261.0, 12933498.0, 11294890.0], [-4.0, -3.0, -5.0, -3.0], [-2.0, -3.0, 478458.0, -3.0], [938973.0, 915053.0, 870017.0, 859310.0]], '5:8': [[12633043.0, 12832879.0, 12883090.0, 12883088.0], [-3.0, -4.0, -3.0, -4.0], [459516.0, -2.0, 466732.0, -2.0], [258596.0, 195504.0, 848698.0, 951383.0]], '5:10': [[6859965.0, -2.0, 4971262.0, 6421035.0], [-4.0, -4.0, -5.0, -5.0], [-3.0, -3.0, -4.0, -3.0], [915054.0, 848699.0, -3.0, 747299.0]], '4:3': [[-7.0, -5.0, -7964.0, 5638692.0], [1382851.0, 103697.0, 1500632.0, 1264997.0], [-2.0, -2.0, -291.0, 416209.0], [-5.0, 155629.0, -17273.0, 1233863.0]], '5:6': [[9726865.0, 11621254.0, 3928290.0, 413907.0], [-2.0, -1.0, -2.0, -1.0], [588743.0, 522142.0, 0, 538669.0], [1249374.0, 870022.0, 755714.0, 1296603.0]], '5:7': [[11248781.0, 10840802.0, 12984007.0, -114401.0], [-2.0, -3.0, -2.0, -3591.0], [527552.0, -3.0, 491787.0, -14664.0], [915059.0, 182296.0, 182296.0, 258597.0]], '4:7': [[9726865.0, 13085326.0, 9240061.0, 11621254.0], [150749.0, -3.0, -3.0, -3.0], [459516.0, 449687.0, 102983.0, 522142.0], [-3.0, 828380.0, 21142.0, 204242.0]], '3:7': [[13913069.0, 13965880.0, 5833760.0, 9240060.0], [-2.0, -3.0, -2.0, 145830.0], [-3.0, -3.0, -3.0, 452797.0], [-4.0, -3.0, -4.0, 204241.0]], '3:8': [[13495498.0, 11905410.0, 14018890.0, 12682854.0], [-3.0, -4.0, -18064.0, -4.0], [-3.0, 456103.0, -4391.0, 478459.0], [200331.0, -2.0, -491.0, 915052.0]], '4:8': [[12000927.0, 12682853.0, 13136136.0, 12583335.0], [143521.0, -4.0, -4.0, -4.0], [487178.0, 478458.0, 474449.0, 459515.0], [790543.0, 915053.0, -2.0, 938973.0]], '4:9': [[13034617.0, 9726867.0, 11574247.0, 12832879.0], [122302.0, -5.0, -4.0, -4.0], [482768.0, -4.0, -4.0, 474448.0], [870016.0, 790544.0, 828380.0, 938972.0]], '3:9': [[13289363.0, 3234161.0, 13238152.0, 11065847.0], [-4.0, -5.0, -4.0, 6911.0], [456104.0, -5.0, 463020.0, 482767.0], [828379.0, 755707.0, 838488.0, 926862.0]], '4:10': [[11202774.0, 6892174.0, -2.0, 4470054.0], [-4.0, -5.0, -5.0, -5.0], [63028.0, -4.0, -4.0, -4.0], [915053.0, -4.0, -5.0, 37659.0]], '3:5': [[-3.0, 6724.0, -2.0, 2103284.0], [196378.0, -1.0, 0, 0], [-2.0, -3.0, -2.0, 203903.0], [-4.0, 557916.0, -6.0, -4.0]], '9:1': [[12000916.0, 12682843.0, 11248771.0, 11294880.0], [-4.0, -4.0, -3.0, -3.0], [-5.0, -5.0, -5.0, 154742.0], [-6.0, -6.0, -6.0, 591880.0]], '8:1': [[10975117.0, 10316083.0, 3132371.0, 11621244.0], [-2.0, -3.0, -3.0, -2.0], [-4.0, -4.0, -4.0, -4.0], [-6.0, -5.0, -6.0, -6.0]], '2:4': [[9138.0, 16356.0, 13495493.0, 3720.0], [0, 0, 0, 196378.0], [-3.0, -3.0, -3.0, 2123.0], [-7.0, -6.0, -6.0, 91765.0]], '2:7': [[12984006.0, 268862.0, 2116.0, 13913070.0], [181339.0, -14773.0, -4.0, 57766.0], [-3.0, -991.0, -3.0, 82556.0], [509226.0, -12773.0, -5.0, -3.0]], '2:5': [[664783.0, -2.0, -3.0, 6723.0], [-1.0, -2.0, -1.0, -1.0], [-3.0, -3.0, -3.0, -3.0], [-6.0, -5.0, -6.0, 509226.0]], '10:7': [[9768170.0, 5067492.0, 11668357.0, 244349.0], [-4.0, 97375.0, 1151735.0, -4.0], [183574.0, -4.0, -3.0, 21948.0], [-2.0, -3.0, 1086073.0, -2.0]], '9:8': [[10840797.0, 4833404.0, 8845467.0, 4531276.0], [1383852.0, 1151733.0, 1151733.0, 990952.0], [6413.0, 92673.0, 434531.0, -4.0], [964292.0, 659193.0, 207912.0, 601801.0]], '10:8': [[-4.0, 6240280.0, 3038697.0, 7926.0], [874290.0, 233729.0, 1151734.0, -5.0], [173864.0, -4.0, -4.0, -5.0], [-2.0, 640565.0, 591886.0, 601801.0]], '9:9': [[9851087.0, 2980741.0, 6240282.0, 3535064.0], [1362833.0, 990949.0, 1207759.0, 1207759.0], [415695.0, -5.0, 415695.0, 415693.0], [659194.0, 56256.0, 607013.0, 652883.0]], '8:9': [[10445418.0, 5216548.0, 8690729.0, 5216548.0], [664563.0, 678670.0, 90468.0, 1207760.0], [434531.0, -4.0, -3.0, -3.0], [634559.0, -2.0, 596696.0, -1.0]], '7:9': [[12000925.0, 8614208.0, 10102845.0, 9200147.0], [609930.0, -5.0, -4.0, -5.0], [-3.0, -3.0, -2.0, -4.0], [951384.0, 678921.0, 9559.0, 634558.0]], '6:10': [[9603737.0, 3478731.0, 6421034.0, 4123090.0], [-4.0, -5.0, -5.0, -6.0], [-3.0, -3.0, -4.0, -3.0], [108421.0, -2.0, 764218.0, 596695.0]], '7:10': [[10102846.0, 290594.0, 8614209.0, 290595.0], [583411.0, -6.0, -5.0, -6.0], [-3.0, -4.0, -3.0, -4.0], [678922.0, 596695.0, 596694.0, -2.0]], '10:9': [[3028787.0, 3058812.0, 6892168.0, 2999659.0], [939625.0, 1133322.0, 1342923.0, 1207759.0], [21947.0, 213297.0, 415694.0, 118508.0], [92902.0, 634555.0, 659193.0, 634556.0]], '10:10': [[3058813.0, 3058812.0, 2935196.0, 2962222.0], [1323213.0, 1025768.0, 890295.0, 1133322.0], [415693.0, 213297.0, -6.0, -6.0], [646674.0, 634555.0, 523304.0, 634555.0]], '9:10': [[2776408.0, 2776407.0, 3638028.0, 2876332.0], [494446.0, 494445.0, 858378.0, 1025768.0], [-5.0, -5.0, -5.0, -6.0], [569840.0, 56256.0, -2.0, -2.0]], '8:10': [[8614212.0, 2999660.0, 290594.0, 2776407.0], [874288.0, -6.0, -6.0, -6.0], [-4.0, -5.0, -4.0, -4.0], [12168.0, -2.0, -2.0, -2.0]], '7:6': [[11480523.0, 12883086.0, 12096840.0, 12782766.0], [1388892.0, 1245782.0, 990956.0, 973747.0], [66680.0, -1.0, 533060.0, 0], [640566.0, 1143711.0, 1264985.0, 1100282.0]], '6:6': [[-3382.0, -49064.0, 10840800.0, 12338686.0], [-4591.0, -24873.0, -2.0, 1245783.0], [213306.0, -2891.0, 550488.0, 441361.0], [-129065.0, 1312613.0, 1264984.0, 1264984.0]], '1:7': [[3210839.0, 3222450.0, 13807950.0, 13860460.0], [-3.0, -4.0, -4.0, 177829.0], [-4.0, -4.0, -4.0, -4.0], [9819.0, -6.0, 5711.0, 509225.0]], '1:8': [[3222449.0, 4470053.0, 76425.0, 154753.0], [177828.0, -6.0, -5.0, -11282.0], [-4.0, -6.0, -5.0, -4091.0], [509224.0, -6.0, -6.0, -5173.0]], '7:7': [[12682849.0, 12883087.0, -907848.0, 12338684.0], [1387482.0, 874290.0, -98837.0, 1226672.0], [441361.0, -1.0, -9073.0, -2.0], [1158421.0, 951384.0, 374377.0, 838494.0]], '2:9': [[144154.0, 2489035.0, 2463526.0, 13238153.0], [-4191.0, -6.0, -6.0, -5.0], [-14464.0, 169660.0, 169660.0, 478457.0], [-70628.0, 828378.0, 838487.0, 903543.0]], '2:10': [[13238152.0, 425318.0, 3143287.0, 3397378.0], [-6.0, -6.0, -5.0, -6.0], [478456.0, 456101.0, -7.0, 463020.0], [880824.0, -6.0, 880822.0, 915051.0]], '3:10': [[3199337.0, 496473.0, 12984006.0, 664789.0], [-5.0, -5.0, -6.0, -5.0], [474448.0, -5.0, -5.0, -5.0], [915052.0, 127147.0, 870014.0, 790544.0]], '1:10': [[3176615.0, 3222452.0, 3176616.0, 12984006.0], [171108.0, -6.0, -6.0, -6.0], [146533.0, 139023.0, 466727.0, 466728.0], [848696.0, 903540.0, 870013.0, 903541.0]], '1:9': [[2566161.0, 11433817.0, 2514644.0, 2566163.0], [174418.0, -6.0, -6.0, -6.0], [-5.0, -6.0, -6.0, 466729.0], [9819.0, 838486.0, 828378.0, 870015.0]]}
        # {'4:1': [40680.0, 44542.0, 40681.0, 33749.0], '3:1': [33058.0, 43949.0, 36720.0, 37116.0], '3:2': [41077.0, 51967.0, 38307.0, 41275.0], '4:2': [40680.0, 44541.0, 47315.0, 43353.0], '5:2': [54143.0, 55927.0, 46621.0, 54143.0], '5:3': [55530.0, 56126.0, 54540.0, 55035.0], '5:4': [55729.0, 55729.0, 56127.0, 53054.0], '5:5': [55730.0, 54540.0, 42763.0, -3.0], '5:6': [54541.0, 45338.0, 49989.0, -3.0], '6:5': [53054.0, 39000.0, -4.0, 40186.0], '6:4': [55530.0, 52457.0, 47216.0, 51665.0], '4:4': [54837.0, 54344.0, 56128.0, 55829.0], '4:3': [46621.0, 28407.0, 48207.0, 56026.0], '3:3': [45830.0, 55831.0, 41773.0, 55233.0], '6:3': [55529.0, 55430.0, 55828.0, 54440.0], '7:3': [55528.0, 49390.0, 54441.0, 54142.0], '7:2': [9789.0, 55230.0, 55727.0, 55230.0], '7:1': [-8.0, 55231.0, 41569.0, -8.0], '6:2': [52756.0, 55728.0, 55827.0, 50776.0], '8:3': [51664.0, 50181.0, 55230.0, 51862.0], '9:3': [48992.0, 43547.0, 52457.0, 49584.0], '9:4': [-8.0, -8.0, 51369.0, -9.0], '9:5': [-7.0, -7.0, -7.0, -8.0], '9:6': [-8.0, -6.0, 1378.0, -6.0], '9:7': [-6.0, -7.0, 686.0, -7.0], '10:6': [-6.0, -6.0, -7.0, -7.0], '10:5': [-9.0, -7.0, -7.0, -7.0], '10:4': [37506.0, -8.0, -8.0, -9.0], '10:3': [55228.0, -9.0, 48003.0, 49584.0], '10:2': [53940.0, 52453.0, 55526.0, 55228.0], '10:7': [-6.0, -7.0, -6.0, -7.0], '8:7': [586.0, -5.0, 40188.0, -5.0], '7:7': [40187.0, -3.0, 44941.0, 1775.0], '6:7': [-3.0, 24447.0, 45338.0, 33753.0], '6:8': [24448.0, -3.0, -3.0, -4.0], '7:8': [-4.0, -5.0, 93.0, -5.0], '8:8': [686.0, -5.0, -5.0, -5.0], '8:9': [-6.0, 35234.0, -5.0, 7316.0], '9:8': [-6.0, -6.0, -6.0, -7.0], '9:9': [-6.0, -7.0, 35233.0, -8.0], '10:9': [-7.0, -8.0, 6425.0, -8.0], '10:10': [4444.0, 4346.0, 35134.0, 6326.0], '9:10': [7316.0, 7119.0, 35234.0, 6326.0], '8:10': [4050.0, 6427.0, 35235.0, 7119.0], '10:8': [-7.0, -8.0, -7.0, -7.0], '7:10': [34246.0, 35235.0, 38602.0, 4348.0], '7:9': [-5.0, -5.0, 35235.0, -5.0], '6:10': [1282.0, 38602.0, 38801.0, -4.0], '6:9': [786.0, 38503.0, 34248.0, -5.0], '5:9': [-3.0, -3.0, 38308.0, -3.0], '5:10': [-3.0, 6331.0, 38802.0, 4449.0], '5:8': [-3.0, -3.0, 6631.0, -3.0], '4:9': [-2.0, 7421.0, 39695.0, -2.0], '4:8': [-1.0, -2.0, 39795.0, -3.0], '3:8': [44944.0, 39695.0, 7920.0, 34646.0], '4:7': [-2.0, 39200.0, 52270.0, -3.0], '5:7': [44644.0, -3.0, 50586.0, 41377.0], '8:6': [-6.0, -5.0, 34148.0, -5.0], '7:6': [-5.0, 44643.0, -4.0, 34147.0], '6:6': [38999.0, 40486.0, -4.0, -4.0], '4:6': [55037.0, -2.0, -2.0, 44937.0], '7:5': [51271.0, 40187.0, 38999.0, -5.0], '8:5': [33749.0, 33751.0, -6.0, -7.0], '9:2': [51660.0, 51862.0, 55527.0, 55228.0], '8:2': [53150.0, 55229.0, 55627.0, 55229.0], '8:4': [52457.0, 33750.0, 44937.0, 33748.0], '7:4': [53648.0, 40186.0, 51666.0, 44936.0], '5:1': [52757.0, 55431.0, -7.0, 6818.0], '6:1': [-8.0, -7.0, 52757.0, 41568.0], '2:2': [35928.0, 40684.0, 29693.0, 32168.0], '8:1': [-8.0, 53844.0, -8.0, 51860.0], '9:1': [38295.0, 53645.0, 30378.0, 51661.0], '10:1': [55227.0, 55228.0, 50771.0, 55227.0], '4:10': [34249.0, -2.0, 39397.0, 7321.0], '3:10': [39695.0, 39397.0, 35040.0, 38901.0], '3:9': [44646.0, 39595.0, 197.0, 38605.0], '2:9': [396.0, 0, -1.0, -1.0], '1:9': [31378.0, -1.0, -1.0, -1.0], '2:10': [296.0, 34842.0, 39395.0, 39496.0], '2:3': [37812.0, 49793.0, 55434.0, 53157.0], '2:4': [54146.0, 56427.0, 54148.0, 54049.0], '1:4': [47712.0, 51672.0, 47713.0, 55634.0], '1:3': [32168.0, 55633.0, 47712.0, 55433.0], '1:2': [27611.0, 28207.0, 29297.0, 33357.0], '1:1': [36323.0, 22367.0, 36323.0, 36621.0], '1:5': [55039.0, 50089.0, 53553.0, 54546.0], '1:6': [53553.0, 55735.0, 51972.0, 40192.0], '1:7': [54645.0, 52071.0, 55735.0, 56231.0], '1:8': [55735.0, 0, -1.0, 297.0], '2:6': [55437.0, 56627.0, 54645.0, 55437.0], '3:4': [55830.0, 55139.0, 56327.0, 55236.0], '2:1': [36522.0, 24249.0, 26621.0, 37909.0], '4:5': [55533.0, 46920.0, 49991.0, 13260.0], '3:5': [51869.0, 55536.0, 49596.0, 53651.0], '3:6': [54248.0, 51775.0, 55537.0, 55036.0], '3:7': [49992.0, 44646.0, 56528.0, 45933.0], '2:5': [55337.0, 56527.0, 54545.0, 54248.0], '2:7': [56329.0, 56727.0, 55636.0, 55735.0], '1:10': [97.0, 34841.0, 39395.0, 39396.0]}
        # 不是最优{'4:1': [29493.0, 31175.0, 31175.0, 30581.0], '3:1': [27316.0, 31275.0, 30483.0, 30186.0],
        #             '3:2': [31076.0, 30187.0, 31575.0, 31175.0], '4:2': [31174.0, 28800.0, 31176.0, 29691.0],
        #             '5:2': [30581.0, 29393.0, 30880.0, 30383.0], '5:3': [30384.0, 21674.0, -5.0, -5.0],
        #             '5:4': [21673.0, -4.0, 21675.0, -4.0], '5:5': [-5.0, -4.0, 21377.0, -3.0],
        #             '5:6': [-4.0, -3.0, -3.0, -3.0], '6:5': [-4.0, 291.0, -4.0, -5.0],
        #             '6:4': [-6.0, -5.0, 10190.0, 10089.0], '4:4': [16724.0, 25337.0, 28705.0, 18110.0],
        #             '4:3': [28801.0, 28407.0, 21673.0, 29492.0], '3:3': [31077.0, 29790.0, 18310.0, 28800.0],
        #             '6:3': [-6.0, 586.0, 29690.0, -6.0], '7:3': [-6.0, 9990.0, -6.0, -7.0],
        #             '7:2': [-6.0, 9890.0, -6.0, -7.0], '7:1': [-8.0, 9790.0, -7.0, -8.0],
        #             '6:2': [-8.0, 585.0, 30384.0, 1276.0], '8:3': [-7.0, -7.0, 8603.0, -6.0],
        #             '9:3': [-8.0, -8.0, -7.0, -8.0], '9:4': [-8.0, -7.0, -7.0, -7.0],
        #             '9:5': [-7.0, -7.0, -7.0, -8.0], '9:6': [-6.0, -6.0, -6.0, -6.0],
        #             '9:7': [-6.0, -5.0, -5.0, -6.0], '10:6': [-6.0, -6.0, -6.0, -7.0],
        #             '10:5': [-8.0, -7.0, -7.0, -7.0], '10:4': [-7.0, -7.0, -8.0, -7.0],
        #             '10:3': [-8.0, -7.0, -8.0, -7.0], '10:2': [-10.0, -8.0, 1175.0, -9.0],
        #             '10:7': [-6.0, -6.0, -6.0, -7.0], '8:7': [-5.0, -5.0, 687.0, -5.0],
        #             '7:7': [-4.0, -3.0, 1381.0, -4.0], '6:7': [-3.0, -4.0, 1778.0, -4.0],
        #             '6:8': [787.0, -3.0, -3.0, -4.0], '7:8': [-4.0, -5.0, 93.0, -5.0],
        #             '8:8': [-5.0, -5.0, -5.0, -5.0], '8:9': [-5.0, -6.0, -5.0, -7.0],
        #             '9:8': [-5.0, -6.0, -6.0, -6.0], '9:9': [-6.0, -7.0, -6.0, -6.0],
        #             '10:9': [-7.0, -8.0, -7.0, -7.0], '10:10': [-8.0, -8.0, 3852.0, -8.0],
        #             '9:10': [-6.0, -7.0, 3952.0, -8.0], '8:10': [-6.0, -6.0, 4052.0, -7.0],
        #             '10:8': [-7.0, -6.0, -6.0, -6.0], '7:10': [-5.0, -5.0, 4152.0, -5.0],
        #             '7:9': [-5.0, -5.0, -4.0, -5.0], '6:10': [-4.0, -4.0, 4252.0, -4.0],
        #             '6:9': [-4.0, -3.0, 392.0, -5.0], '5:9': [-3.0, -3.0, 888.0, -3.0],
        #             '5:10': [-3.0, -3.0, 4352.0, -4.0], '5:8': [-3.0, -3.0, -2.0, -3.0],
        #             '4:9': [-2.0, -2.0, 1285.0, -2.0], '4:8': [-1.0, -2.0, 6632.0, -2.0],
        #             '3:8': [6829.0, 0, 7128.0, -1.0], '4:7': [-2.0, 6532.0, 24451.0, -3.0],
        #             '5:7': [-4.0, -3.0, 1878.0, -2.0], '8:6': [-6.0, -5.0, 587.0, -5.0],
        #             '7:6': [-5.0, 1083.0, -4.0, -5.0], '6:6': [-4.0, 1183.0, -4.0, -4.0],
        #             '4:6': [21377.0, -2.0, -2.0, -3.0], '7:5': [-5.0, -5.0, -5.0, -5.0],
        #             '8:5': [-7.0, -6.0, -6.0, -7.0], '9:2': [-9.0, -8.0, 9591.0, -8.0],
        #             '8:2': [-7.0, 8404.0, 9691.0, -7.0], '8:4': [-7.0, -6.0, -6.0, -7.0],
        #             '7:4': [-6.0, -5.0, 10090.0, -6.0], '5:1': [27116.0, 30879.0, -7.0, 6818.0],
        #             '6:1': [-8.0, -7.0, 27116.0, 6819.0], '2:2': [29889.0, 31675.0, 29297.0, 30980.0],
        #             '8:1': [-8.0, -8.0, -8.0, -8.0], '9:1': [-9.0, 9491.0, -8.0, -8.0],
        #             '10:1': [-10.0, -9.0, 9391.0, -10.0], '4:10': [-2.0, -2.0, 4452.0, -2.0],
        #             '3:10': [6334.0, -1.0, -1.0, -1.0], '3:9': [6434.0, -1.0, -1.0, 0],
        #             '2:9': [99.0, 0, -1.0, -1.0], '1:9': [98.0, -1.0, -1.0, -1.0], '2:10': [-1.0, 0, 0, 6234.0],
        #             '2:3': [30189.0, 31775.0, 27217.0, 25930.0], '2:4': [30190.0, 31776.0, 31081.0, 29790.0],
        #             '1:4': [27217.0, 31577.0, 15241.0, 31080.0], '1:3': [29297.0, 27216.0, 25138.0, 21478.0],
        #             '1:2': [24443.0, 28207.0, 29297.0, 29694.0], '1:1': [17515.0, 22367.0, 17515.0, 27612.0],
        #             '1:5': [31081.0, 31479.0, 31577.0, 31875.0], '1:6': [31280.0, 31379.0, 24747.0, 31480.0],
        #             '1:7': [31479.0, 16233.0, 17818.0, 27323.0], '1:8': [31379.0, 0, -1.0, 198.0],
        #             '2:6': [29103.0, 32075.0, 31479.0, 28608.0], '3:4': [29791.0, 28706.0, 22469.0, 27813.0],
        #             '2:1': [30483.0, 24249.0, 26621.0, 30880.0], '4:5': [27813.0, 20980.0, 18608.0, 13260.0],
        #             '3:5': [28705.0, 20292.0, 29994.0, 27812.0], '3:6': [29201.0, 22372.0, 28609.0, 18606.0],
        #             '3:7': [19401.0, 7028.0, 31085.0, 20688.0], '2:5': [30389.0, 31975.0, 31478.0, 28409.0],
        #             '2:7': [31183.0, 32175.0, 30290.0, 27124.0], '1:10': [-2.0, -2.0, -2.0, 6134.0]}
        self.canvas = None
        self.root = None
        self.upsilon = 1
        self.quit = True
        self.startPos = [(10.5, 10.5), (1.5, 10.5), (10.5, 1.5), (1.5, 1.5)]
        self.start = 0
        self.end = 0
        self.timelist = []
        self.goalIndex = 1
        self.goalSelect()

    def goalSelect(self):
        switch = {'1000': 0, '0100': 1, '0010': 2, '0001': 3}
        self.goalIndex = switch.get(self.goalSelection)

    def getGoalNo(self):
        return self.goalIndex

    def updateQTable(self, reward, current_state):
        """Change q_table to reflect what we have learnt."""

        # retrieve the old action value from the Q-table (indexed by the previous state and the previous action)
        # old_q = self.q_table[self.prev_s][self.prev_a]
        maxvalue = max(self.q_table[current_state][self.goalIndex])
        new_q = maxvalue + reward
        # assign the new action value to the Q-table
        self.q_table[self.prev_s][self.goalIndex][self.prev_a] = new_q
        # print('self.q_table[', self.prev_s, '][', self.goalIndex, '][', self.prev_a, '] = ', new_q)
        # print(self.q_table)

    def updateQTableFromTerminatingState(self, reward):
        """Change q_table to reflect what we have learnt, after reaching a terminal state."""
        new_q = reward + self.q_table[self.prev_s][self.goalIndex][self.prev_a]
        # assign the new action value to the Q-table
        self.q_table[self.prev_s][self.goalIndex][self.prev_a] = new_q

    def act(self, world_state, agent_host, current_r, world_x, world_y):
        """take 1 action in response to the current world state"""

        obs_text = world_state.observations[-1].text
        obs = json.loads(obs_text)  # most recent observation
        self.logger.debug(obs)
        if not u'XPos' in obs or not u'ZPos' in obs:
            self.logger.error("Incomplete observation received: %s" % obs_text)
            return 0
        current_s = "%d:%d" % (int(obs[u'XPos']), int(obs[u'ZPos']))
        self.logger.debug("State: %s (x = %.2f, z = %.2f)" % (current_s, float(obs[u'XPos']), float(obs[u'ZPos'])))
        if current_s not in self.q_table:
            self.q_table[current_s] = [([0] * len(self.actions)) for p in range(self.goalNo)]

        # update Q values
        if self.prev_s is not None and self.prev_a is not None:
            self.updateQTable(current_r, current_s)

        self.drawQ(world_x, world_y, curr_x=int(obs[u'XPos']), curr_y=int(obs[u'ZPos']))

        # select the next action
        rnd = random.random()
        if rnd < self.epsilon:
            a = random.randint(0, len(self.actions) - 1)
            self.logger.info("Random action: %s" % self.actions[a])
        else:
            m = max(self.q_table[current_s][self.goalIndex])
            self.logger.debug("Current values: %s" % ",".join(str(x) for x in self.q_table[current_s]))
            l = list()
            for x in range(0, len(self.actions)):
                if self.q_table[current_s][self.goalIndex][x] == m:
                    l.append(x)
            y = random.randint(0, len(l) - 1)
            a = l[y]
            self.logger.info("Taking q action: %s" % self.actions[a])
        # try to send the selected action, only update prev_s if this succeeds
        try:
            agent_host.sendCommand(self.actions[a])

            self.prev_s = current_s
            self.prev_a = a

        except RuntimeError as e:
            self.logger.error("Failed to send command: %s" % e)

        return current_r

    def run(self, agent_host, world_x, world_y):
        """run the agent on the world"""
        self.start = time.time()
        total_reward = 0

        self.prev_s = None
        self.prev_a = None

        self.goalIndex = self.getGoalNo()
        is_first_action = True

        # main loop:
        world_state = agent_host.getWorldState()
        while world_state.is_mission_running:

            current_r = 0

            if is_first_action:
                # wait until have received a valid observation
                while True:
                    time.sleep(0.1)
                    world_state = agent_host.getWorldState()
                    for error in world_state.errors:
                        self.logger.error("Error: %s" % error.text)
                    for reward in world_state.rewards:
                        current_r += reward.getValue()
                    if world_state.is_mission_running and len(world_state.observations) > 0 and not \
                            world_state.observations[-1].text == "{}":
                        total_reward += self.act(world_state, agent_host, current_r, world_x, world_y)
                        break
                    if not world_state.is_mission_running:
                        break
                is_first_action = False
            else:
                # wait for non-zero reward
                while world_state.is_mission_running and current_r == 0:
                    time.sleep(0.1)
                    world_state = agent_host.getWorldState()
                    for error in world_state.errors:
                        self.logger.error("Error: %s" % error.text)
                    for reward in world_state.rewards:
                        current_r += reward.getValue()
                # allow time to stabilise after action
                while True:
                    time.sleep(0.1)
                    world_state = agent_host.getWorldState()
                    for error in world_state.errors:
                        self.logger.error("Error: %s" % error.text)
                    for reward in world_state.rewards:
                        current_r += reward.getValue()
                    if world_state.is_mission_running and len(world_state.observations) > 0 and not \
                            world_state.observations[-1].text == "{}":
                        total_reward += self.act(world_state, agent_host, current_r, world_x, world_y)
                        break
                    if not world_state.is_mission_running:
                        break

        # process final reward
        self.logger.debug("Final reward: %d" % current_r)
        total_reward += current_r

        # update Q values
        if self.prev_s is not None and self.prev_a is not None:
            self.updateQTableFromTerminatingState(current_r)

        self.drawQ(world_x, world_y)
        self.end = time.time()
        return total_reward

    def drawQ(self, world_x, world_y, curr_x=None, curr_y=None):
        scale = 40

        if self.canvas is None or self.root is None:
            self.root = tk.Tk()
            self.root.wm_title("Q-table")
            # draw the background(base)
            self.canvas = tk.Canvas(self.root, width=(world_x + 2) * scale, height=(world_y + 2) * scale, borderwidth=0,
                                    highlightthickness=0, bg="black")
            self.canvas.grid()
            self.root.update()
        self.canvas.delete("all")
        action_inset = 0.1
        action_radius = 0.1
        curr_radius = 0.2
        action_positions = [(0.5, action_inset), (0.5, 1 - action_inset), (action_inset, 0.5), (1 - action_inset, 0.5)]
        # (NSWE to match action order)
        min_value = -20
        max_value = 20
        # draw the chart
        for x in range(1, world_x + 1):
            for y in range(1, world_y + 1):
                s = "%d:%d" % (x, y)
                self.canvas.create_rectangle(x * scale, y * scale, (x + 1) * scale, (y + 1) * scale, outline="#ffe",
                                             fill="#000")
                for action in range(4):
                    if not s in self.q_table:
                        continue
                    value = self.q_table[s][self.goalIndex][action]
                    color = 255 * (value - min_value) / (max_value - min_value)  # map value to 0-255
                    color = int(color)
                    color = max(min(color, 255), 0)  # ensure within [0,255]
                    color_string = '#%02x%02x%02x' % (255 - color, color, 0)
                    self.canvas.create_oval((x + action_positions[action][0] - action_radius) * scale,
                                            (y + action_positions[action][1] - action_radius) * scale,
                                            (x + action_positions[action][0] + action_radius) * scale,
                                            (y + action_positions[action][1] + action_radius) * scale,
                                            outline=color_string, fill=color_string)
        if curr_x is not None and curr_y is not None:
            self.canvas.create_oval((curr_x + 0.5 - curr_radius) * scale,
                                    (curr_y + 0.5 - curr_radius) * scale,
                                    (curr_x + 0.5 + curr_radius) * scale,
                                    (curr_y + 0.5 + curr_radius) * scale,
                                    outline="#fff", fill="#fff")
        self.root.update()


# draw the un-separated maze
def DrawMazeBase(my_mission, length, width, block_type):
    # to draw a maze base that each block considered as a cell
    length += 1
    width += 1
    my_mission.drawCuboid(0, 226, 0, 0, 230, length, block_type)
    my_mission.drawCuboid(0, 226, 0, width, 230, 0, block_type)
    my_mission.drawCuboid(width, 226, 0, width, 230, length, block_type)
    my_mission.drawCuboid(width, 226, length, 0, 230, length, block_type)

    # x = random.randint(1, width_m)
    # z = random.randint(1, length_m)
    my_mission.drawBlock(2, 226, 8, 'gold_block')


# put resource randomly in the maze
def release_resource(item_no, length, width):
    # blcok_list = ['diamond_block', 'stone', 'wool', 'glod_ore', 'diamond_ore', 'iron_ore',
    #               'dragon_egg', 'carpet', 'hopper', 'carrots', 'beacon', 'cocoa', 'cake', 'reeds', 'lever',
    #               'wheat', 'piston', 'bed']
    block_list = ['diamond_block', 'iron_block', 'redstone_block', 'quartz_block', 'hay_block']
    # item_list = random.sample(blcok_list, item_no)
    length = [3, 6, 6]
    width = [3, 5, 7]
    for x, z, block in zip(length, width, block_list):
        # my_mission.drawItem(length_random, 227, width_random, item_list[i])
        for j in range(item_no):
            my_mission.drawBlock(x, 226, z, block)


def setReward(my_mission, agent):
    reward_list = {0: '2.5,8.5', 1: '3.5,3.5', 2: '6.5,5.5', 3: '6.5,7.5'}
    block_list = [(2.5, 8.5), (3.5, 3.5), (6.5, 5.5), (6.5, 7.5)]
    num = reward_list.get(agent.goalIndex)
    x, z = num.split(',')
    x, z = float(x), float(z)
    my_mission.rewardForReachingPosition(x, 227.0, z, 100.0, 0.0)
    print((x, z), 'reward:', 100)
    for str in block_list:
        if not str == (x, z):
            x_, z_ = str
            print((x_, z_), 'reward:', -100)
            my_mission.rewardForReachingPosition(x_, 227.0, z_, -100.0, 0.0)


def setQuitBlock(my_mission):
    block_list = [(2.5, 8.5), (3.5, 3.5), (6.5, 5.5), (6.5, 7.5)]
    for x, z in block_list:
        print(x, z)
        # position of the agent, not the block
        my_mission.endAt(x, 227.0, z, 0.5)


if sys.version_info[0] == 2:
    sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)
else:
    import functools

    print = functools.partial(print, flush=True)

# implement qlearning
agent = Qlearning()

#  start minecraft
agent_host = MalmoPython.AgentHost()
agent_host.addOptionalStringArgument("size", "The size of the maze.", "10*10")
agent_host.addOptionalIntArgument("res", "The number of resource want to add", 4)
# sys.argv receive the command arguments
try:
    agent_host.parse(sys.argv)
except RuntimeError as e:
    print('ERROR:', e)
    print(agent_host.getUsage())
    exit(1)

if agent_host.receivedArgument("help"):
    print(agent_host.getUsage())
    exit(0)
# get the size of maze from command line
size_of_maze = agent_host.getStringArgument("size")
size_list = size_of_maze.split('*', 1)
resource_no = agent_host.getIntArgument("res")
agent_host.getIntArgument("res")
length = int(size_list[0])
width = int(size_list[1])

# read xml from outside file
mission_file = './flat_maze.xml'
with open(mission_file, 'r') as f:
    print("Loading mission from %s" % mission_file)
    mission_xml = f.read()
    my_mission = MalmoPython.MissionSpec(mission_xml, True)

DrawMazeBase(my_mission, length, width, "stonebrick")
release_resource(resource_no, length, width)
setQuitBlock(my_mission)
# Attempt to start a mission
max_retries = 3
cumulative_rewards = []
total_repeat = 1000

# start learning
for i in range(total_repeat):
    setReward(my_mission, agent)
    print(len(agent.startPos))
    if i % 50 == 0 and i != 0:
        print(agent.q_table)
    if len(agent.timelist) == 10:
        differ = np.var(agent.timelist)
        print('The difference is:', differ)
        agent.timelist.clear()
        if differ < agent.upsilon:
            if len(agent.startPos) > 0:
                x, y = agent.startPos[0]
                agent.startPos.remove((x, y))
                my_mission.startAtWithPitchAndYaw(x, 227.0, y, 20.0, 90.0)
            else:
                print('Converged!!!')
                break

    agent.quit = True
    print()
    print('Repeat %d of %d' % (i + 1, total_repeat))
    my_mission_record = MalmoPython.MissionRecordSpec()
    # change the start position to get a more throughout table
    # if i > 1:
    #     my_mission.startAtWithPitchAndYaw(10.5, 227.0, 10.5, 20.0, 90.0)

    for retry in range(max_retries):
        try:
            agent_host.startMission(my_mission, my_mission_record)
            break
        except RuntimeError as e:
            if retry == max_retries - 1:
                print("Error starting mission:", e)
                exit(1)
            else:
                time.sleep(2)

    # Loop until mission starts:
    print("Waiting for the mission to start ", end=' ')
    world_state = agent_host.getWorldState()
    while not world_state.has_mission_begun:
        print(".", end="")
        time.sleep(0.1)
        world_state = agent_host.getWorldState()
        for error in world_state.errors:
            print("Error:", error.text)

    print()

    cumulative_reward = agent.run(agent_host, length, width)
    print('Cumulative reward: %d' % cumulative_reward)
    cumulative_rewards += [cumulative_reward]
    agent.timelist.append(agent.end - agent.start)
    print('Running time for this epsoid is ', agent.end - agent.start)
    time.sleep(0.5)

print('Q-table: ', agent.q_table)
print("Mission running ", end=' ')

# agent_host.sendCommand("move 1")

while world_state.is_mission_running:
    print(".", end="")
    time.sleep(0.1)
    world_state = agent_host.getWorldState()
    for error in world_state.errors:
        print("Error:", error.text)

print()
print("Mission ended")
# Mission has ended.
